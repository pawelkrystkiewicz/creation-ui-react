name: Release

on:
  push:
    branches:
      - master

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN_AUTOMATION: ${{ secrets.NPM_TOKEN_AUTOMATION }}
      GITHUB_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v5
        with:
          node-version: 22.19.0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Verify NPM Authentication
        run: npm whoami

      - name: Install Dependencies
        run: bun i

      - name: Generate changeset if none exists
        run: |
          if [ ! "$(ls -A .changeset/*.md 2>/dev/null | grep -v README.md)" ]; then
            echo "No changeset files found, checking for new commits..."

            # Get commit messages since last release, excluding release commits
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              COMMITS=$(git log --pretty=format:"%s" --since="1 day ago" | grep -v "^Version Packages" | grep -v "^Release:" | grep -v "^chore: release" | grep -v "^chore(release)" || true)
            else
              COMMITS=$(git log --pretty=format:"%s" $LAST_TAG..HEAD | grep -v "^Version Packages" | grep -v "^Release:" | grep -v "^chore: release" | grep -v "^chore(release)" || true)
            fi

            # Check if we have any non-release commits
            if [ -z "$COMMITS" ]; then
              echo "No non-release commits found, skipping changeset generation"
              exit 0
            fi

            echo "Found commits for release:"
            echo "$COMMITS"

            # Determine version bump based on conventional commits
            BUMP_TYPE="patch"
            while IFS= read -r commit; do
              if [[ $commit == *"!"* ]] || [[ $commit == feat!* ]] || [[ $commit == *"BREAKING CHANGE"* ]]; then
                BUMP_TYPE="major"
                break
              elif [[ $commit == feat* ]]; then
                BUMP_TYPE="minor"
              fi
            done <<< "$COMMITS"

            # Calculate next version for changeset
            CURRENT_VERSION=$(cat packages/ui/package.json | grep '"version":' | sed 's/.*"version": *"\([^"]*\)".*/\1/')
            echo "Current version: $CURRENT_VERSION"
            
            # Calculate next version based on bump type
            IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
            major=${version_parts[0]}
            minor=${version_parts[1]}
            patch=${version_parts[2]}
            
            case $BUMP_TYPE in
              "major")
                NEXT_VERSION="$((major + 1)).0.0"
                ;;
              "minor")
                NEXT_VERSION="$major.$((minor + 1)).0"
                ;;
              "patch")
                NEXT_VERSION="$major.$minor.$((patch + 1))"
                ;;
            esac
            
            echo "Next version will be: $NEXT_VERSION"

            # Generate changeset file
            CHANGESET_FILE=".changeset/auto-generated-$(date +%s).md"
            echo "---" > "$CHANGESET_FILE"
            echo "\"@creation-ui/react\": $BUMP_TYPE" >> "$CHANGESET_FILE"
            echo "---" >> "$CHANGESET_FILE"
            echo "" >> "$CHANGESET_FILE"
            echo "üöÄ Release v$NEXT_VERSION" >> "$CHANGESET_FILE"
            echo "" >> "$CHANGESET_FILE"
            echo "### Changes in this release:" >> "$CHANGESET_FILE"
            echo "" >> "$CHANGESET_FILE"
            echo "$COMMITS" >> "$CHANGESET_FILE"

            echo "Generated changeset with $BUMP_TYPE version bump (v$NEXT_VERSION)"
          else
            echo "Changeset files already exist, skipping generation"
          fi

      - name: Get next version for PR title
        id: version
        run: |
          if [ -f packages/ui/package.json ]; then
            CURRENT_VERSION=$(cat packages/ui/package.json | grep '"version":' | sed 's/.*"version": *"\([^"]*\)".*/\1/')
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            
            # Check if there are any changesets to determine if this will create a new version
            if [ "$(ls -A .changeset/*.md 2>/dev/null | grep -v README.md)" ]; then
              echo "has_changesets=true" >> $GITHUB_OUTPUT
            else
              echo "has_changesets=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          publish: bun run release
          title: 'üöÄ Release: @creation-ui/react packages'
          createGithubReleases: true

      - name: Notify Slack on Release Success
        if: steps.changesets.outputs.published == 'true'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            üöÄ New package version published successfully: ${{ steps.changesets.outputs.publishedPackages }}
            üîó <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow>
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify Slack on Release PR Created
        if: steps.changesets.outputs.hasChangesets == 'true'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          channel-id: '${{ secrets.SLACK_CHANNEL_ID }}'
          slack-message: |
            üìù Release PR created with changelog updates
            üîó <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow>
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify Slack on Release Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          channel-id: '${{ secrets.SLACK_CHANNEL_ID }}'
          slack-message: |
            ‚ùå Release workflow failed
            üîó <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow>
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}